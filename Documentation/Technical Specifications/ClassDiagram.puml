@startuml classDiagram
title Model class diagram
scale 1.5

GameManager "1" *-- "1" BankController : bankController
GameManager "1" *-- "1" PatronController : patronController
GameManager "1" *-- "1" PlayerController : playerController
GameManager "1" *-- "1" ShopController : shopController

BankController "1" o-down- "1" TokenArray : tokens

PatronController "1" *-- "0..5" Patron : patrons
Patron "1" *-- "1" TokenArray : requirements

PlayerController "1" *-- "2..4" Player : players
Player "1" *-- "1" TokenArray : tokens
Player "1" *-- "2" Hand : hand, reserved
Player "1" *-- "0..5" Patron : patrons

ShopController "1" *-- "3" Rank : ranks
Rank "1" *-- "1" Hand : hand
Rank "1" *-- "1" Deck : deck

Deck <|-d- CardStack
Hand <|-- CardStack
Hand *-d[hidden]- Card

Card "1" *-- "2" TokenArray : price, bonus
TokenArray <.. Color


BankController .r[hidden]. PatronController
PatronController .r[hidden]. PlayerController
PlayerController .r[hidden]. ShopController

Patron .r[hidden]. Player
Player .r[hidden]. Rank

' VictoryPoint .u[hidden]. Player
VictoryPoint "1" -u-* "1" Player : victoryPoints
VictoryPoint "1" -[norank]-* "1" Patron : victoryPoints
VictoryPoint "1" -[norank]-* "1" Card : victoryPoints

CardStack "1" -l-* "0..40" Card : cards




class GameManager {
    +init(nbPlayer int) : void
    +gather_board_state() : BoardState
}


class BankController {
    +init(nbPlayer : int) : void
    +deposit(TokenArray) : void
    +withdraw(TokenArray) : void
}

class PatronController {
    +init(nbPlayer : int) : void
    +withdraw(Hand) : Patron
}

class PlayerController {
    +init(nbPlayer : int) : void
    +buy_reserved_card(PlayerId : int, CardId : int) : void
    +buy_shop_card(PlayerId : int, CardId : int) : void
    +reserve_card(PlayerId : int, CardId : int) : void
    +take_tokens(PlayerId : int, TokenArray) : void
}

class ShopController {
    +init() : void
    +get_card_price(CardId : int) : TokenArray
    +withdraw_card(CardId : int) : Card
}




class Player {
    +get_card_price(CardId) : TokenArray
    +pay(TokenArray) : void
    +withdraw_reserved_card(CardId) : Card
    +deposit_card(Card) : void
    +deposit_reserved_card(Card) : void
    +deposit_token(TokenArray) : void
}

class Rank {
    -int : level
    +get_card_price(CardId : int) : TokenArray
    +withdraw_card(CardId : int) : Card
    -Draw() : void
}

interface CardStack {
    +add_card(card: Card) : void
    +remove_card(cardId : int) : void
}

class Hand {
    +get_card_price(CardId) : TokenArray
    +withdraw_card(CardId) : Card
    +deposit_card(Card) : void
}

class Deck {
    +Draw() : Card
}

class Card {
    -int: id
}


class VictoryPoint {
    -value : int
}

class Patron {
}

class TokenArray {
    -tokens : list<int>
    +withdraw_tokens(TokenArray) : void
    +withdraw_token(Color, amount : int) : void
    +deposit_tokens(TokenArray) : void
    +deposit_token(Color, amount : int) : void
}


enum Color {
    WHITE
    BLUE
    GREEN
    RED
    BLACK
    GOLD
}

@enduml


