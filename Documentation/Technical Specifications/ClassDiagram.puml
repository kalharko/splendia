@startuml classDiagram
title Model class diagram
scale 1.5

GameManager "1" *-- "1" BankController : bankController
GameManager "1" *-- "1" PatronController : patronController
GameManager "1" *-- "1" PlayerController : playerController
GameManager "1" *-- "1" ShopController : shopController

BankController "1" o-down- "1" TokenArray : tokens

PatronController "1" *-- "0..5" Patron : patrons
Patron "1" *-- "1" TokenArray : requirements

PlayerController "1" *-- "2..4" Player : players
Player "1" *-- "1" TokenArray : tokens
Player "1" *-- "2" Hand : hand, reserved
Player "1" *-- "0..5" Patron : patrons

ShopController "1" *-- "3" Rank : ranks
Rank "1" *-- "1" Hand : hand
Rank "1" *-- "1" Deck : deck

Deck <|-d- CardStack
Hand <|-- CardStack
Hand *-d[hidden]- Card

Card "1" *-- "2" TokenArray : price, bonus
TokenArray <.. Color


BankController .r[hidden]. PatronController
PatronController .r[hidden]. PlayerController
PlayerController .r[hidden]. ShopController

Patron .r[hidden]. Player
Player .r[hidden]. Rank

' VictoryPoint .u[hidden]. Player
VictoryPoint "1" -u-* "1" Player : victoryPoints
VictoryPoint "1" -[norank]-* "1" Patron : victoryPoints
VictoryPoint "1" -[norank]-* "1" Card : victoryPoints

CardStack "1" -l-* "0..40" Card : cards




class GameManager {
    -bankController: BankController
    -patronController: PatronController
    -playerController: PlayerController
    -shopController: ShopController
    -nbPlayer: int
    -currentPlayer: int
    -firstPlayerId: int
    -userId: int
    +init(nbPlayer: int) : void
    +gather_ia_board_state(nbPlayer: int) : dict
    +launch_game(nbPlayer: int) : None
    +next_player() : void
    +buy_card(cardId: int) : void
    +reserve_card(cardId: int) : void
    +reserve_pile_card(cardId: int) : void
    +take_tokens(tokens: TokenArray): void
    +pass_turn() : void
    +is_last_turn() : bool
    +cpu_turn() : void
    +get_player_victory_point(playerId: int) : int
    +get_current_player() : Player
    +get_patron_controller() : PatronController
    +get_player_controller() : PlayerController
    +get_shop_controller() : ShopController
    +get_bank_controller() : BankController
}


class BankController {
    -bank: TokenArray
    -maxInBank: TokenArray
    +init(nbPlayer: int) : void
    +can_deposit(tokens: TokenArray) : bool
    +can_withdraw(tokens: TokenArray) : bool
    +deposit(tokens: TokenArray) : void
    +withdraw(tokens: TokenArray) : void
    +cheat_withdraw(tokens: TokenArray)
}

class PatronController {
    -patrons: list[Patron]
    +init(nbPlayer : int) : void
    +update(hand: Hand) : Patron
    +withdraw(Hand) : Patron
}

class PlayerController {
    -players: list[Player]
    +init(nbPlayer : int, observer: PatronController) : void
    +buy_reserved_card(PlayerId : int, CardId : int, bankController: BankController) : void
    +buy_shop_card(PlayerId : int, CardId : int, bankController: BankController, shopController: ShopController) : void
    +reserve_card(PlayerId : int, CardId : int, bankController: BankController, shopController: ShopController) : void
    +reserve_pile_card(PlayerId: int, pileLeve: int, shopController: ShopController): void
    +take_tokens(PlayerId : int, tokens: TokenArray, bankController: BankController) : void
    +cheat_take_tokens(playerId: int, tokens: TokenArray, bankController: BankController) : void
}

class ShopController {
    -ranks: list[Rank]
    +init() : void
    +has_card(cardId: int) : bool
    +get_card_price(CardId : int) : TokenArray
    +withdraw_card(CardId : int) : Card
    +can_withdraw_pile_card(pileLevel: int) : bool
    +withdraw_pile_card(pileLevel) : Card
}




class Player {
    -player_id: int
    -hand: Hand
    -reserved: Hand
    -bonus_tokens: TokenArray
    -tokens: TokenArray
    -victoryPoints: VictoryPoint
    -patrons: list[Patrons]
    -observer: PatronController
    +get_card_price(CardId) : TokenArray
    +pay(TokenArray) : void
    +can_pay(price: TokenArray): tuple[bool, TokenArray]
    +withdraw_reserved_card(CardId) : Card
    +deposit_card(Card) : void
    +deposit_reserved_card(Card) : void
    +deposit_token(TokenArray) : void
}

class Rank {
    -int : level
    +get_card_price(CardId : int) : TokenArray
    +withdraw_card(CardId : int) : Card
    -Draw() : void
}

interface CardStack {
    +add_card(card: Card) : void
    +remove_card(cardId : int) : void
}

class Hand {
    +get_card_price(CardId) : TokenArray
    +withdraw_card(CardId) : Card
    +deposit_card(Card) : void
}

class Deck {
    +Draw() : Card
}

class Card {
    -int: id
}


class VictoryPoint {
    -value : int
}

class Patron {
}

class TokenArray {
    -tokens : list<int>
    +withdraw_tokens(TokenArray) : void
    +withdraw_token(Color, amount : int) : void
    +deposit_tokens(TokenArray) : void
    +deposit_token(Color, amount : int) : void
}


enum Color {
    WHITE
    BLUE
    GREEN
    RED
    BLACK
    GOLD
}

@enduml
